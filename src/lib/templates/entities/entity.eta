<%~ includeFile('./header.eta') %>
/* eslint @typescript-eslint/no-unused-vars: "off" */

import {
    Column,
    Entity,
<%~ it.associations.map((assoc) => `${assoc.type},`).filter((v, i, s) => s.indexOf(v) === i).join("\r\n") %>
<% if (it.createdAt) { %>
    CreateDateColumn,
<% } %>
<% if (it.updatedAt) { %>
    UpdateDateColumn,
<% } %>
    PrimaryGeneratedColumn,
    Generated,
    JoinColumn,
    JoinTable,
    Index,
    Unique,
    PrimaryColumn
} from "typeorm";
import {
  IsOptional,
  IsString,
  MaxLength,
  IsNotEmpty,
  IsEmail,
  IsBoolean,
  ValidateNested,
} from 'class-validator';
<% if (it.apiType === "graphql") { %>
   import { JSONResolver } from 'graphql-scalars';
<% } %>
import { Type } from 'class-transformer';
import { CrudValidationGroups } from '@nestjsx/crud';
<% if (it.importEnums) { %>
import * as enums from '../enums';
<% } %>
<% it.entitiesToImport.forEach((assocName) => { %>
import {<%= assocName %>} from '../<%= assocName %>/<%= assocName %>.entity';
<% }) %>

const { CREATE, UPDATE } = CrudValidationGroups;

@Entity('<%= it.snakeCasedName %>')
<% it.indexes.forEach((index) => { %>
@Index([<%~ index.fields.map((field) => `"${field}"`).join(', ') %>]<% if (index.unique) { %>, { unique: true } <% } %>)
<% }) %>
<% it.uniques.forEach((unique) => { %>
@Unique(<% if (unique.name) {%> "<%= unique.name %>", <%} %>[<%~ unique.fields.map((field) => `"${field}"`).join(', ') %>])
<% }) %>
export class <%= it.name %> {
<% if (it.createPrimaryKey) { %>
    // Fields
    @PrimaryGeneratedColumn()
    id!: number;
<% } %>

<% if (it.createdAt) { %>
    @CreateDateColumn()
    created_at: Date;
<% } %>

<% if (it.updatedAt) { %>
    @UpdateDateColumn()
    updated_at: Date;
<% } %>

<% it.columns.forEach((field) => { %>

<%~ includeFile(`./entities/entity-col-${field.type}`, { field }) %>

<% }); %>

// Associations    
<% it.associations.forEach((assoc) => { %>

    <%// Generate property ONLY based on referenceName (to_name) %>
    <%// relationshipName is the camelCased version of referenceName %>
    <%// pluralizedRelationshipName is the pluralized version (for arrays) %>

    <% if (assoc.type === 'OneToMany') { %>

        @OneToMany(
            () => <%= assoc.name %>,
            <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.inverseSidePropertyName %>
        )
        <%= assoc.pluralizedRelationshipName %>: <%= assoc.name %>[];

    <% } else if (assoc.type === 'ManyToOne') { %>
        <% if (assoc.index) { %>
        @Index()
        <% } %>
        @ManyToOne(() => <%= assoc.name %><% if (assoc.biDirectional) { %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.inverseSidePropertyName %><% } %><% if (assoc.cascadeDelete) { %>, { onDelete: "CASCADE" }<% } %>)
        @JoinColumn({ name: '<%= assoc.camelCasedId %>' })
        <%= assoc.relationshipName %>: <%= assoc.name %>;

        @Column({ type: "integer", <% if (assoc.nullable) { %> nullable: true <% } %>})
        <%= assoc.camelCasedId %>: number;

    <% } else if (assoc.type === 'ManyToMany') { %>

        @ManyToMany(() => <%= assoc.name %><% if (assoc.biDirectional) { %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.inverseSidePropertyName %><% } %>)
        <% if (assoc.joinTable) { %>
        @JoinTable(<%
          let joinTableArgs = [];
          if (assoc.joinTableName) { joinTableArgs.push(`name: '${assoc.joinTableName}'`); }
          if (assoc.joinColumnName) { joinTableArgs.push(`joinColumn: { name: '${assoc.joinColumnName}', referencedColumnName: 'id' }`); }
          if (assoc.inverseJoinColumnName) { joinTableArgs.push(`inverseJoinColumn: { name: '${assoc.inverseJoinColumnName}', referencedColumnName: 'id' }`); }
          if (joinTableArgs.length > 0) { 
        %>{
          <%~ joinTableArgs.join(',\n          ') %>
        }<% } %>)
        <% } %>
        <%= assoc.pluralizedRelationshipName %>: <%= assoc.name %>[];

    <% } else if (assoc.type === 'OneToOne') { %>

        @OneToOne(
            (type: any) => <%= assoc.name%>,
             <% if (assoc.biDirectional) { %>(<%= assoc.camelCasedName %>) => <%= assoc.camelCasedName %>.<%= assoc.inverseSidePropertyName %>,<% } %>
            {
                onDelete: "CASCADE",
                cascade: ["insert", "update"],
            })
         <% if (assoc.joinTable) { %>@JoinColumn()<% } %>
        <%= assoc.relationshipName %>: <%= assoc.name %>;

    <% } %>
<% }) %>
}