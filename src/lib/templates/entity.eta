<%~ includeFile('./header.eta') %>

import {
    Column,
    Entity,
<%~ it.associations.map((assoc) => `${assoc.type},`).filter((v, i, s) => s.indexOf(v) === i).join("\r\n")%>
<% if (it.createdAt) { %>    CreateDateColumn,
<% } %>
<% if (it.updatedAt) { %>    UpdateDateColumn,
<% } %>
    PrimaryGeneratedColumn,
    Generated,
    JoinColumn,
    JoinTable
} from "typeorm";
import {
  IsOptional,
  IsString,
  MaxLength,
  IsNotEmpty,
  IsEmail,
  IsBoolean,
  ValidateNested,
} from 'class-validator';
import { Type } from 'class-transformer';
import { CrudValidationGroups } from '@nestjsx/crud';
<% it.associations.forEach((assoc) => { %>
import {<%= assoc.name %>} from '../<%= assoc.name %>/<%= assoc.name %>.entity';
<% }) %>

const { CREATE, UPDATE } = CrudValidationGroups;

@Entity('<%= it.snakeCasedName %>')
export class <%= it.name %> {
    // Fields
    @PrimaryGeneratedColumn()
    id!: number;

<% if (it.createdAt) { %>
    @CreateDateColumn()
    created_at: Date;
<% } %>

<% if (it.updatedAt) { %>
    @UpdateDateColumn()
    updated_at: Date;
<% } %>

<% it.columns.forEach((field) => { %>

<%~ includeFile(`./entity-col-${field.type}`, { field }) %>

<% }); %>

<% it.associations.forEach((assoc) => { %>
    // Associations    
    <% if (assoc.type === 'OneToMany') { %>

    @<%= assoc.type %>(() => <%= assoc.name %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.entityName %>)
    <%= assoc.camelCasedName %>s: <%= assoc.name %>[]
    
    <% } else if (assoc.type === 'ManyToOne') { %>
    
    @<%= assoc.type %>(() => <%= assoc.name %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.entityName %>s)
    <%= assoc.camelCasedName %>: <%= assoc.name %>[]
    
    <% } else if (assoc.type === 'ManyToMany') { %>
    
    @<%= assoc.type %>(() => <%= assoc.name %>)
    <% if (assoc.joinTable) { %>@JoinTable()<% } %>
    <%= assoc.pluralizedName %>: <%= assoc.name %>[]
    
    <% } else if (assoc.type === 'OneToOne') { %>
    
    @ValidateNested({ always: true })
    @Type((t) => <%= assoc.name%>)
    @OneToOne(() => <%= assoc.name%>, (p) => p.<%= assoc.entityName %>, { cascade: true })
    @JoinColumn()
    <%= assoc.camelCasedName %>: <%= assoc.name %>
    
    <% } %>
<% }) %>
}