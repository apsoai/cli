<%~ includeFile('./header.eta') %>
/* eslint @typescript-eslint/no-unused-vars: "off" */

import { JSONResolver } from 'graphql-scalars';
import {
    Column,
    Entity,
<%~ it.associations.map((assoc) => `${assoc.type},`).filter((v, i, s) => s.indexOf(v) === i).join("\r\n") %>
<% if (it.createdAt) { %>
    CreateDateColumn,
<% } %>
<% if (it.updatedAt) { %>
    UpdateDateColumn,
<% } %>
    PrimaryGeneratedColumn,
    Generated,
    JoinColumn,
    JoinTable,
    Index,
    PrimaryColumn
} from "typeorm";
import {
  IsOptional,
  IsString,
  MaxLength,
  IsNotEmpty,
  IsEmail,
  IsBoolean,
  ValidateNested,
} from 'class-validator';
import { Type } from 'class-transformer';
import { CrudValidationGroups } from '@nestjsx/crud';
<% if (it.importEnums) { %>
import * as enums from './<%=it.name%>.enum';
<% } %>
<% it.entitiesToImport.forEach((assocName) => { %>
import {<%= assocName %>} from '../<%= assocName %>/<%= assocName %>.entity';
<% }) %>

const { CREATE, UPDATE } = CrudValidationGroups;

@Entity('<%= it.snakeCasedName %>')
<% it.indexes.forEach((index) => { %>
@Index([<%~ index.fields.map((field) => `"${field}"`).join(', ') %>]<% if (index.unique) { %>, { unique: true } <% } %>)
<% }) %>
export class <%= it.name %> {
<% if (it.createPrimaryKey) { %>
    // Fields
    @PrimaryGeneratedColumn()
    id!: number;
<% } %>

<% if (it.createdAt) { %>
    @CreateDateColumn()
    created_at: Date;
<% } %>

<% if (it.updatedAt) { %>
    @UpdateDateColumn()
    updated_at: Date;
<% } %>

<% it.columns.forEach((field) => { %>

<%~ includeFile(`./entity-col-${field.type}`, { field }) %>

<% }); %>

<% it.associations.forEach((assoc) => { %>
    // Associations    
    <% if (assoc.type === 'OneToMany') { %>

        @OneToMany(() => <%= assoc.name %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= assoc.entityName %>)
        <%= assoc.pluralizedName %>: <%= assoc.name %>[]
    
    <% } else if (assoc.type === 'ManyToOne') { %>
        <% if (assoc.index) { %>
        @Index()
        <% } %>
        @ManyToOne(() => <%= assoc.name %><% if (assoc.biDirectional) { %>, <%= assoc.camelCasedName %> => <%= assoc.camelCasedName %>.<%= it.pluralizedName %><% } %>)
        @JoinColumn({ name: '<%= assoc.camelCasedId %>' })
        <%= assoc.relationshipName %>: <%= assoc.name %>

        @Column(<% if (assoc.nullable) { %>{ nullable: true }<% } %>)
        <%= assoc.camelCasedId %>: number;
    
    <% } else if (assoc.type === 'ManyToMany') { %>
    
        @ManyToMany(() => <%= assoc.name %>)
        <% if (assoc.joinTable) { %>@JoinTable()<% } %>
        <%= assoc.pluralizedName %>: <%= assoc.name %>[]
    
    <% } else if (assoc.type === 'OneToOne') { %>
    
        @OneToOne(
            (type: any) => <%= assoc.name%>,
            (p) => p.<%= assoc.entityName %>, 
            {
                onDelete: "CASCADE",
                cascade: ["insert", "update"],
            })
        @JoinColumn()
        <%= assoc.camelCasedName %>: <%= assoc.name %>

    <% } %>
<% }) %>
}