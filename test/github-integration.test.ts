import { describe, expect, test } from '@jest/globals';\nimport ConfigManager from '../src/lib/config-manager';\nimport GitHubAuth from '../src/lib/github-auth';\nimport GitHubClient from '../src/lib/github-client';\n\ndescribe('GitHub Integration', () => {\n  describe('ConfigManager', () => {\n    test('should create instance without error', () => {\n      expect(() => new ConfigManager()).not.toThrow();\n    });\n\n    test('should load empty config initially', () => {\n      const configManager = new ConfigManager();\n      const config = configManager.loadConfig();\n      expect(config).toEqual({});\n    });\n\n    test('should save and load configuration', () => {\n      const configManager = new ConfigManager();\n      const testConfig = {\n        github: {\n          connected: true,\n          username: 'testuser',\n        },\n      };\n      \n      configManager.saveConfig(testConfig);\n      const loadedConfig = configManager.loadConfig();\n      expect(loadedConfig.github?.username).toBe('testuser');\n    });\n  });\n\n  describe('GitHubAuth', () => {\n    test('should create instance without error', () => {\n      const configManager = new ConfigManager();\n      expect(() => new GitHubAuth(configManager)).not.toThrow();\n    });\n\n    test('should detect unauthenticated state initially', () => {\n      const configManager = new ConfigManager();\n      const githubAuth = new GitHubAuth(configManager);\n      \n      expect(githubAuth.isAuthenticated()).toBe(false);\n      \n      const authStatus = githubAuth.getAuthStatus();\n      expect(authStatus.authenticated).toBe(false);\n    });\n  });\n\n  describe('GitHubClient', () => {\n    test('should create instance without error', () => {\n      const configManager = new ConfigManager();\n      expect(() => new GitHubClient(configManager)).not.toThrow();\n    });\n\n    test('should parse repository URLs correctly', () => {\n      const configManager = new ConfigManager();\n      const githubClient = new GitHubClient(configManager);\n\n      // Test various URL formats\n      const testCases = [\n        {\n          input: 'https://github.com/owner/repo',\n          expected: { owner: 'owner', repo: 'repo' },\n        },\n        {\n          input: 'https://github.com/owner/repo.git',\n          expected: { owner: 'owner', repo: 'repo' },\n        },\n        {\n          input: 'git@github.com:owner/repo.git',\n          expected: { owner: 'owner', repo: 'repo' },\n        },\n        {\n          input: 'owner/repo',\n          expected: { owner: 'owner', repo: 'repo' },\n        },\n        {\n          input: 'invalid-url',\n          expected: null,\n        },\n      ];\n\n      testCases.forEach(({ input, expected }) => {\n        const result = githubClient.parseRepositoryUrl(input);\n        expect(result).toEqual(expected);\n      });\n    });\n\n    test('should format repository URLs correctly', () => {\n      const configManager = new ConfigManager();\n      const githubClient = new GitHubClient(configManager);\n\n      expect(githubClient.formatRepositoryUrl('owner', 'repo', 'https'))\n        .toBe('https://github.com/owner/repo.git');\n      \n      expect(githubClient.formatRepositoryUrl('owner', 'repo', 'ssh'))\n        .toBe('git@github.com:owner/repo.git');\n    });\n  });\n\n  describe('Configuration Management', () => {\n    test('should handle service repository connections', () => {\n      const configManager = new ConfigManager();\n      \n      const repositoryConfig = {\n        type: 'github' as const,\n        url: 'https://github.com/owner/repo.git',\n        owner: 'owner',\n        name: 'repo',\n        branch: 'main',\n      };\n\n      // Set repository connection\n      configManager.setServiceRepository('test-service', repositoryConfig);\n      \n      // Verify connection was saved\n      const serviceConfig = configManager.getServiceConfig('test-service');\n      expect(serviceConfig?.repository).toEqual(repositoryConfig);\n      \n      // List services with repositories\n      const servicesWithRepos = configManager.listServicesWithRepositories();\n      expect(servicesWithRepos).toHaveLength(1);\n      expect(servicesWithRepos[0].service).toBe('test-service');\n      expect(servicesWithRepos[0].repository).toEqual(repositoryConfig);\n      \n      // Remove repository connection\n      configManager.removeServiceRepository('test-service');\n      const updatedServiceConfig = configManager.getServiceConfig('test-service');\n      expect(updatedServiceConfig?.repository).toBeUndefined();\n    });\n\n    test('should handle GitHub configuration', () => {\n      const configManager = new ConfigManager();\n      \n      // Initially no GitHub config\n      expect(configManager.getGitHubConfig()).toBeNull();\n      \n      // Set GitHub config\n      configManager.setGitHubConfig({\n        connected: true,\n        username: 'testuser',\n      });\n      \n      const githubConfig = configManager.getGitHubConfig();\n      expect(githubConfig?.connected).toBe(true);\n      expect(githubConfig?.username).toBe('testuser');\n      \n      // Clear GitHub config\n      configManager.clearGitHubConfig();\n      expect(configManager.getGitHubConfig()).toBeNull();\n    });\n  });\n});"
